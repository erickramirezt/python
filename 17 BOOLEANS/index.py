# PYTHON BOOLEANS
# BOOLEANS REPRESENT ONE OF TWO VALUES: TRUE OR FALSE.

# BOOLEAN VALUES
# IN PROGRAMMING YOU OFTEN NEED TO KNOW IF AN EXPRESSION IS TRUE OR FALSE
# YOU CAN EVALUATE ANY EXPRESSION IN PYTHON, AND GET ONE OF TWO ANSWERS, TRUE OR FALSE.
# WHEN YOU COMPARE TWO VALUES, THE EXPRESSION IS EVALUATED AND PYTHON RETURNS THE BOOLEAN ANSWER:
# EXAMPLE
print(10 > 9)
print(10 == 9)
print(10 < 9)

# WHEN YOU RUN A CONDITIONAL STATEMENT IN PYTHON, THE RESULT IS A BOOLEAN.
# EXAMPLE
a = 200
b = 33
if b > a:
    print("b is greater than a")
else:
    print("b is not greater than a")

# EVALUATE VALUES AND VARIABLES
# THE BOOL() FUNCTION ALLOWS YOU TO EVALUATE ANY VALUE, AND GIVE YOU TRUE OR FALSE IN RETURN
# EXAMPLE
print(bool("Hello"))
print(bool(15))

# MOST VALUES ARE TRUE
# ALMOST ANY VALUE IS EVALUATED TO TRUE IF IT HAS SOME SORT OF CONTENT.
# ANY STRING IS TRUE, EXCEPT EMPTY STRINGS.
# ANY NUMBER IS TRUE, EXCEPT 0.
# ANY LIST, TUPLE, SET, AND DICTIONARY ARE TRUE, EXCEPT EMPTY ONES.
# EXAMPLE
bool("abc")
bool(123)
bool(["apple", "cherry", "banana"])

# SOME VALUES ARE FALSE
""" IN FACT, THERE ARE NOT MANY VALUES THAT EVALUATE TO FALSE, EXCEPT EMPTY VALUES, SUCH AS (), [], {}, "", 
THE NUMBER 0, AND THE VALUE NONE. AND OF COURSE THE VALUE FALSE EVALUATES TO FALSE. """
# EXAMPLE
bool(False)
bool(None)
bool(0)
bool("")
bool(())
bool([])
bool({})

""" ONE MORE VALUE, OR OBJECT IN THIS CASE, EVALUATES TO FALSE, AND THAT IS IF YOU HAVE AN OBJECT THAT IS 
MADE FROM A CLASS WITH A __LEN__ FUNCTION THAT RETURNS 0 OR FALSE: """

# FUNCTIONS CAN RETURN A BOOLEAN
# YOU CAN CREATE FUNCTIONS THAT RETURNS A BOOLEAN VALUE:
# EXAMPLE
def myFunction():
    return True

print(myFunction())

# YOU CAN EXECUTE CODE BASED ON THE BOOLEAN ANSWER OF A FUNCTION:
# EXAMPLE
def myFunction():
    return True

if myFunction():
    print("YES!")
else:
    print("NO!")

""" PYTHON ALSO HAS MANY BUILT-IN FUNCTIONS THAT RETURNS A BOOLEAN VALUE, LIKE THE isinstance() FUNCTION, WHICH
CAN BE USED TO DETERMINE IF AN OBJECT IS OF A CERTAIN DATA TYPE: """
# EXAMPLE
x = 200
print(isinstance(x, int))