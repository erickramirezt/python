# PYTHON - UPDATE TUPLES
# TUPLES ARE UNCHANGEABLE, MEANING THAT YOU CANNOT CHANGE, ADD, OR REMOVE ITEMS ON A TUPLE ONCE IT IS CREATED.
# BUT THERE ARE SOME WORKAROUNDS.

# CHANGE TUPLE VALUES
# ONCE A TUPLE IS CREATED, YOU CANNOT CHANGE ITS VALUES. TUPLES ARE UNCHANGEABLE, OR IMMUTABLE AS IT ALSO IS
# CALLED.
# BUT THERE IS A WORKAROUND. YOU CAN CONVERT THE TUPLE INTO A LIST, CHANGE THE LIST, AND CONVERT THE LIST BACK
# INTO A TUPLE.
# CONVERT THE TUPLE INTO A LIST TO BE ABLE TO CHANGE IT:
x = ("apple", "banana", "cherry")
y = list(x)
y[1] = "kiwi"
x = tuple(y)
print(x)  # OUTPUT: ('apple', 'kiwi', 'cherry')

# ADD ITEMS
# SINCE TUPLES ARE IMMUTABLE, THEY DO NOT HAVE A BUILD-IN APPEND() METHOD, BUT THERE ARE OTHER WAYS TO ADD
# ITEMS TO A TUPLE.

# 1. CONVERT INTO A LIST: JUST LIKE THE WORKAROUND FOR CHANGING A TUPLE, YOU CAN CONVERT IT INTO A LIST, ADD
# YOUR ITEM(S), AND CONVERT IT BACK INTO A TUPLE.
# CONVERT THE TUPLE INTO A LIST, ADD "ORANGE", AND CONVERT IT BACK INTO A TUPLE:
thistuple = ("apple", "banana", "cherry")
y = list(thistuple)
y.append("orange")
thistuple = tuple(y)

# 2. ADD TUPLE TO A TUPLE: YOU ARE ALLOWED TO ADD TUPLES TO TUPLES. SO IF YOU WANT TO ADD ONE ITEM, (OR MANY),
# CREATE A NEW TUPLE WITH THE ITEM(S), AND ADD IT TO THE EXISTING TUPLE.
# CREATE A NEW TUPLE WITH THE VALUE "ORANGE", AND ADD THAT TUPLE:
thistuple = ("apple", "banana", "cherry")
y = ("orange",)
thistuple += y
print(thistuple)  # OUTPUT: ('apple', 'banana', 'cherry', 'orange')
# NOTE: WHEN CREATING A TUPLE WITH ONLY ONE ITEM, REMEMBER TO INCLUDE A COMMA AFTER THE ITEM, OTHERWISE IT WILL
# NOT BE RECOGNIZED AS A TUPLE.

# REMOVE ITEMS
# NOTE: YOU CANNOT REMOVE ITEMS IN A TUPLE.
# TUPLES ARE UNCHANGEABLE, SO YOU CANNOT REMOVE ITEMS FROM IT, BUT YOU CAN USE THE SAME WORKAROUNDS AS WE USED
# FOR CHANGING AND ADDING TUPLE ITEMS.
# CONVERT THE TUPLE INTO A LIST, REMOVE "APPLE", AND CONVERT IT BACK INTO A TUPLE:
thistuple = ("apple", "banana", "cherry")
y = list(thistuple)
y.remove("apple")
thistuple = tuple(y)

# OR YOU CAN DELETE THE TUPLE COMPLETELY:
# THE DEL KEYWORD CAN DELETE THE TUPLE COMPLETELY:
thistuple = ("apple", "banana", "cherry")
del thistuple
# print(thistuple)  # THIS WILL RAISE AN ERROR BECAUSE THE TUPLE NO LONGER EXISTS