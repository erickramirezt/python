# PYTHON IF... ELSE

# PYTHON CONDITIONS AND IF STATEMENTS
# PYTHON SUPPORTS THE USUAL LOGICAL CONDITIONS FROM MATHEMATICS:
# EQUAL TO: a == b
# NOT EQUAL TO: a != b
# LESS THAN: a < b
# LESS THAN OR EQUAL TO: a <= b
# GREATER THAN: a > b
# GREATER THAN OR EQUAL TO: a >= b

# THESE CONDITIONS CAN BE USED IN SEVERAL WAYS, MOST COMMONLY IN "IF STATEMENTS" AND LOOPS.
# AN "IF STATEMENT" IS WRITTEN BY USING THE IF KEYWORD.

# EXAMPLE
# IF STATEMENT:
a = 33
b = 200
if b > a:
    print("b is greater than a")

# IN THIS EXAMPLE WE USE TWO VARIABLES, A AND B, WHICH ARE USED AS PART OF THE IF
# STATEMENT TO TEST WHETHER B IS GREATER THAN A. AS A IS 33, AND B IS 200, WE KNOW THAT
# 200 IS GREATER THAN 33, AND SO WE PRINT TO SCREEN THAT "B IS GREATER THAN A".

# INDENTATION
# PYTHON RELIES ON INDENTATION (WHITESPACE AT THE BEGINNING OF A LINE) TO DEFINE SCOPE
# IN THE CODE. OTHER PROGRAMMING LANGUAGES OFTEN USE CURLY-BRACKETS FOR THIS PURPOSE.

# EXAMPLE
# IF STATEMENT, WITHOUT INDENTATION (WILL RAISE AN ERROR):
# a = 33
# b = 200
# if b > a:
# print("b is greater than a") # YOU WILL GET AN ERROR

# ELIF
# THE ELIF KEYWORD IS PYTHON'S WAY OF SAYING "IF THE PREVIOUS CONDITIONS WERE NOT TRUE,
# THEN TRY THIS CONDITION".

# EXAMPLE
a = 33
b = 33
if b > a:
    print("b is greater than a")
elif a == b:
    print("a and b are equal")

# IN THIS EXAMPLE A IS EQUAL TO B, SO THE FIRST CONDITION IS NOT TRUE, BUT THE ELIF
# CONDITION IS TRUE, SO WE PRINT TO SCREEN THAT "A AND B ARE EQUAL".

# ELSE
# THE ELSE KEYWORD CATCHES ANYTHING WHICH ISN'T CAUGHT BY THE PREVIOUS CONDITIONS.
# EXAMPLE
a = 200
b = 33
if b > a:
    print("b is greater than a")
elif a == b:
    print("a and b are equal")
else:
    print("a is greater than b")

# IN THIS EXAMPLE A IS GREATER THAN B, SO THE FIRST CONDITION IS NOT TRUE, ALSO THE ELIF
# CONDITION IS NOT TRUE, SO WE GO TO THE ELSE CONDITION AND PRINT TO SCREEN THAT "A IS
# GREATER THAN B".
# YOU CAN ALSO HAVE AN ELSE WITHOUT THE ELIF:

# EXAMPLE
a = 200
b = 33
if b > a:
    print("b is greater than a")
else:
    print("b is not greater than a")

# SHORT HAND IF
# IF YOU HAVE ONLY ONE STATEMENT TO EXECUTE, YOU CAN PUT IT ON THE SAME LINE AS THE IF
# STATEMENT.

# EXAMPLE
# ONE LINE IF STATEMENT:
if a > b:
    print("a is greater than b")

# SHORT HAND IF... ELSE
# IF YOU HAVE ONLY ONE STATEMENT TO EXECUTE, ONE FOR IF, AND ONE FOR ELSE, YOU CAN PUT IT
# ALL ON THE SAME LINE:

# EXAMPLE
# ONE LINE IF ELSE STATEMENT:
a = 2
b = 330
print("A") if a > b else print("B")

# THIS TECHNIQUE IS KNOWN AS TERNARY OPERATORS, OR CONDITIONAL EXPRESSIONS.

# YOU CAN ALSO HAVE MULTIPLE ELSE STATEMENTS ON THE SAME LINE:
# EXAMPLE
# ONE LINE IF ELSE STATEMENT, WITH 3 CONDITIONS:
a = 330
b = 330
print("A") if a > b else print("=") if a == b else print("B")

# AND
# THE AND KEYWORD IS A LOGICAL OPERATOR, AND IS USED TO COMBINE CONDITIONAL STATEMENTS:

# EXAMPLE
# TEST IF A IS GREATER THAN B, AND IF C IS GREATER THAN A:
a = 200
b = 33
c = 500
if a > b and c > a:
    print("Both conditions are True")

# OR
# THE OR KEYWORD IS A LOGICAL OPERATOR, AND IS USED TO COMBINE CONDITIONAL STATEMENTS:

# EXAMPLE
# TEST IF A IS GREATER THAN B, OR IF A IS GREATER THAN C:
a = 200
b = 33
c = 500
if a > b or a > c:
    print("At least one of the conditions is True")

# NOT
# THE NOT KEYWORD IS A LOGICAL OPERATOR, AND IS USED TO REVERSE THE RESULT OF THE
# CONDITIONAL STATEMENT:

# EXAMPLE
# TEST IF A IS NOT GREATER THAN B:
a = 200
b = 33
if not a > b:
    print("a is not greater than b")

# NESTED IF
# YOU CAN HAVE IF STATEMENTS INSIDE IF STATEMENTS, THIS IS CALLED NESTED IF STATEMENTS.

# EXAMPLE
x = 41
if x > 10:
    print("Above ten,")
    if x > 20:
        print("and also above 20!")
    else:
        print("but not above 20.")

# THE PASS STATEMENT
# IF STATEMENTS CANNOT BE EMPTY, BUT IF YOU FOR SOME REASON HAVE AN IF STATEMENT WITH NO
# CONTENT, PUT IN THE PASS STATEMENT TO AVOID GETTING AN ERROR.

# EXAMPLE
a = 33
b = 200
if b > a:
    pass