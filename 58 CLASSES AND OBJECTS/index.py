# PYTHON CLASSES AND OBJECTS

# PYTHON CLASSES/OBJECTS
# PYTHON IS AN OBJECT ORIENTED PROGRAMMING LANGUAGE.
# ALMOST EVERYTHING IN PYTHON IS AN OBJECT, WITH ITS PROPERTIES AND METHODS.
# A CLASS IS LIKE AN OBJECT CONSTRUCTOR, OR A "BLUEPRINT" FOR CREATING OBJECTS.

# CREATE A CLASS
# TO CREATE A CLASS, USE THE KEYWORD CLASS:

# EXAMPLE
# CREATE A CLASS NAMED MyClass, WITH A PROPERTY NAMED x:
class MyClass:
    x = 5

# CREATE OBJECT
# NOW WE CAN USE THE CLASS NAMED MyClass TO CREATE OBJECTS:


# EXAMPLE
# CREATE AN OBJECT NAMED p1, AND PRINT THE VALUE OF X:
p1 = MyClass()
print(p1.x)

# THE __init__() FUNCTION
# THE EXAMPLE ABOVE ARE CLASSES AND OBJECTS IN THEIR SIMPLIEST FORM, AND ARE NOT REALLY
# USEFUL IN REAL LIFE APPLICATIONS.
# TO UNDERSTAND THE MEANING OF CLASSES WE HAVE TO UNDERSTAND THE BUILT-IN __init__()
# FUNCTION.
# ALL CLASSES HAVE A FUNCTION CALLED __init__(), WHICH IS ALWAYS EXECUTED WHEN THE CLASS
# IS BEING INITIATED.
# USE THE __init__() FUNCTION TO ASSIGN VALUES TO OBJECT PROPERTIES, OR OTHER OPERATIONS
# THAT ARE NECESSARY TO DO WHEN THE OBJECT IS BEING CREATED:

# EXAMPLE
# CREATE A CLASS NAMED PERSON, USE THE __init__() FUNCTION TO ASSIGN VALUES FOR NAME AND
# AGE:


class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age


p1 = Person("John", 36)
print(p1.name)

# NOTE: THE __init__() FUNCTION IS CALLED AUTOMATICALLY EVERY TIME THE CLASS IS BEING USED
# TO CREATE A NEW OBJECT.

# THE __str__() FUNCTION
# THE __str__() FUNCTION CONTROLS WHAT SHOULD BE RETURNED WHEN THE CLASS OBJECT IS
# REPRESENTED AS A STRING
# IF THE __str__() FUNCTION IS NOT SET, THE STRING REPRESENTATION OF THE OBJECT IS RETURNED

# EXAMPLE
# THE STRING REPRESENTATION OF AN OBJECT WITHOUT A __str__() FUNCTION:


class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age


p1 = Person("John", 36)

print(p1)

# EXAMPLE
# THE STRING REPRESENTATION OF AN OBJECT WITH A __str__() FUNCTION:


class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):  # THIS IS THE __str__() FUNCTION
        return f"{self.name}({self.age})"


p1 = Person("John", 36)
print(p1)

# OBJECT METHODS
# OBJECTS CAN ALSO CONTAIN METHODS. METHODS IN OBJECTS ARE FUNCTIONS THAT BELONGS TO THE
# OBJECT.
# LET US CREATE A METHOD IN THE PERSON CLASS:

# EXAMPLE
# INSERT A FUNCTION THAT PRINTS A GREETING, AND EXECUTE IT ON THE p1 OBJECT:


class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def myfunc(self):  # THIS IS THE OBJECT METHOD
        print(f"HELLO MY NAME IS {self.name}")


p1 = Person("John", 36)
p1.myfunc()

# NOTE: THE SELF PARAMETER IS A REFERENCE TO THE CURRENT INSTANCE OF THE CLASS, AND IS USED
# TO ACCESS VARIABLES THAT BELONGS TO THE CLASS.

# THE SELF PARAMETER
# THE SELF PARAMETER IS A REFERENCE TO THE CURRENT INSTANCE OF THE CLASS, AND IS USED TO
# ACCESS VARIABLES THAT BELONGS TO THE CLASS.
# IT DOES NOT HAVE TO BE NAMED SELF, YOU CAN CALL IT WHATEVER YOU LIKE, BUT IT HAS TO BE
# THE FIRST PARAMETER OF ANY FUNCTION IN THE CLASS:

# EXAMPLE
# USE THE WORD "mysillyobject" INSTEAD OF "self" :


class Person:
    def __init__(mysillyobject, name, age):
        mysillyobject.name = name
        mysillyobject.age = age

    def myfunc(abc):
        print(f"HELLO MY NAME IS {abc.name}")


p1 = Person("John", 36)
p1.myfunc()

# MODIFYING OBJECT PROPERTIES
# YOU CAN MODIFY PROPERTIES ON OBJECTS LIKE THIS:

# EXAMPLE
# SET THE AGE OF p1 TO 40:
p1.age = 40

# DELETE OBJECT PROPERTIES
# YOU CAN DELETE PROPERTIES ON OBJECTS BY USING THE DEL KEYWORD:

# EXAMPLE
# DELETE THE AGE PROPERTY FROM THE p1 OBJECT:
del p1.age

# DELETE OBJECTS
# YOU CAN DELETE OBJECTS BY USING THE DEL KEYWORD:

# EXAMPLE
# DELETE THE p1 OBJECT:
del p1

# THE PASS STATEMENT
# CLASS DEFINITIONS CANNOT BE EMPTY, BUT IF YOU FOR SOME REASON HAVE A CLASS DEFINITION
# WITH NO CONTENT, PUT IN THE PASS STATEMENT TO AVOID GETTING AN ERROR.

# EXAMPLE


class Person:
    pass
