# PYTHON INHERITANCE

# PYTHON INHERITANCE
# INHERITANCE ALLOWS US TO DEFINE A CLASS THAT INHERITS ALL THE METHODS AND PROPERTIES FROM
# ANOTHER CLASS.
# PARENT CLASS IS THE CLASS BEING INHERITED FROM, ALSO CALLED BASE CLASS.
# CHILD CLASS IS THE CLASS THAT INHERITS FROM ANOTHER CLASS, ALSO CALLED DERIVED CLASS.

# CREATE A PARENT CLASS
# ANY CLASS CAN BE A PARENT CLASS, SO THE SYNTAX IS THE SAME AS CREATING ANY OTHER CLASS.

# EXAMPLE
# CREATE A CLASS NAMED PERSON, WITH PROPERTIES FIRSTNAME AND LASTNAME, AND A METHOD
# PRINTNAME.
class Person:
    def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname

    def printname(self):
        print(self.firstname, self.lastname)


# USE THE PERSON CLASS TO CREATE AN OBJECT, AND THEN EXECUTE THE PRINTNAME METHOD:
x = Person("John", "Doe")
x.printname()

# CREATE A CHILD CLASS
# TO CREATE A CLASS THAT INHERITS THE FUNCTIONALITY FROM ANOTHER CLASS, SEND THE PARENT
# CLASS AS A PARAMETER WHEN CREATING THE CHILD CLASS.

# EXAMPLE
# CREATE A CLASS NAMED STUDENT, WHICH WILL INHERIT THE PROPERTIES AND METHODS FROM THE
# PERSON CLASS:


class Student(Person):
    pass

# NOTE: USE THE PASS KEYWORD WHEN YOU DO NOT WANT TO ADD ANY OTHER PROPERTIES OR METHODS
# TO THE CLASS.

# NOW THE STUDENT CLASS HAS THE SAME PROPERTIES AND METHODS AS THE PERSON CLASS.


# EXAMPLE
# USE THE STUDENT CLASS TO CREATE AN OBJECT, AND THEN EXECUTE THE PRINTNAME METHOD:
x = Student("Mike", "Olsen")
x.printname()

# ADD THE __INIT__() FUNCTION
# SO FAR WE HAVE CREATED A CHILD CLASS THAT INHERITS THE PROPERTIES AND METHODS FROM ITS
# PARENT.
# WE WANT TO ADD THE __INIT__() FUNCTION TO THE CHILD CLASS (INSTEAD OF THE PASS KEYWORD).

# NOTE: THE __INIT__() FUNCTION IS CALLED AUTOMATICALLY EVERY TIME THE CLASS IS BEING USED
# TO CREATE A NEW OBJECT.

# EXAMPLE
# ADD THE __INIT__() FUNCTION TO THE STUDENT CLASS:


class Student(Person):
    def __init__(self, fname, lname):
        # ADD PROPERTIES ETC.
        pass

# WHEN YOU ADD THE __INIT__() FUNCTION, THE CHILD CLASS WILL NO LONGER INHERIT THE PARENT'S
# __INIT__() FUNCTION.

# NOTE: THE CHILD'S __INIT__() FUNCTION OVERRIDES THE INHERITED __INIT__() FUNCTION.

# TO KEEP THE INHERITANCE OF THE PARENT'S __INIT__() FUNCTION, ADD A CALL TO THE PARENT'S
# __INIT__() FUNCTION:


class Student(Person):
    def __init__(self, fname, lname):
        Person.__init__(self, fname, lname)

# NOW WE HAVE SUCCESSFULLY ADDED THE __INIT__() FUNCTION, AND KEPT THE INHERITANCE OF THE
# PARENT CLASS, AND WE ARE READY TO ADD FUNCTIONALITY IN THE __INIT__() FUNCTION.

# USE THE SUPER() FUNCTION
# PYTHON ALSO HAS A SUPER() FUNCTION THAT WILL MAKE THE CHILD CLASS INHERIT ALL THE METHODS
# AND PROPERTIES FROM ITS PARENT:

# EXAMPLE


class Student(Person):
    def __init__(self, fname, lname):
        super().__init__(fname, lname)

# BY USING THE SUPER() FUNCTION, YOU DO NOT HAVE TO USE THE NAME OF THE PARENT ELEMENT,
# IT WILL AUTOMATICALLY INHERIT THE METHODS AND PROPERTIES FROM ITS PARENT.

# ADD PROPERTIES

# EXAMPLE
# ADD A PROPERTY CALLED GRADUATIONYEAR TO THE STUDENT CLASS:


class Student(Person):
    def __init__(self, fname, lname):
        super().__init__(fname, lname)
        self.graduationyear = 2019

# IN THE EXAMPLE BELOW, THE YEAR 2019 SHOULD BE A VARIABLE, AND PASSED INTO THE STUDENT
# CLASS WHEN CREATING STUDENT OBJECTS. TO DO SO, ADD ANOTHER PARAMETER IN THE __INIT__()
# FUNCTION:

# EXAMPLE
# ADD A YEAR PARAMETER, AND PASS THE CORRECT YEAR WHEN CREATING OBJECTS:


class Student(Person):
    def __init__(self, fname, lname, year):
        super().__init__(fname, lname)
        self.graduationyear = year


x = Student("Mike", "Olsen", 2019)

# ADD METHODS

# EXAMPLE
# ADD A METHOD CALLED WELCOME TO THE STUDENT CLASS:


class Student(Person):
    def __init__(self, fname, lname, year):
        super().__init__(fname, lname)
        self.graduationyear = year

    def welcome(self):
        print("Welcome", self.firstname, self.lastname,
              "to the class of", self.graduationyear)


# IF YOU ADD A METHOD IN THE CHILD CLASS WITH THE SAME NAME AS A FUNCTION IN THE PARENT
# CLASS, THE INHERITED METHOD WILL NO LONGER BE ACCESSED.