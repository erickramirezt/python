# PYTHON MODULES

# WHAT IS A MODULE?
# CONSIDER A MODULE TO BE THE SAME AS A CODE LIBRARY.
# A FILE CONTAINING A SET OF FUNCTIONS YOU WANT TO INCLUDE IN YOUR APPLICATION.

# USE A MODULE
# TO USE A MODULE, USE THE IMPORT STATEMENT:

# EXAMPLE
# IMPORT THE MODULE NAMED MYMODULE, AND CALL THE GREETING FUNCTION:

# NAMING A MODULE
# YOU CAN NAME THE MODULE FILE WHATEVER YOU LIKE, BUT IT MUST HAVE THE FILE EXTENSION .PY

# RE-NAMING A MODULE
# YOU CAN CREATE AN ALIAS WHEN YOU IMPORT A MODULE, BY USING THE AS KEYWORD:
import mymodule as mx

mx.greeting("Jonathan")

# NOTE: WHEN USING A FUNCTION FROM A MODULE, USE THE SYNTAX: MODULENAME.FUNCTIONNAME

# EXAMPLE
# IMPORT ONLY THE PERSON1 DICTIONARY FROM THE MODULE:
a = mx.person1["age"]
print(a)

# BUILT-IN MODULES
# THERE ARE SEVERAL BUILT-IN MODULES IN PYTHON, WHICH YOU CAN IMPORT WHENEVER YOU LIKE.

# EXAMPLE
# IMPORT AND USE THE PLATFORM MODULE:
import platform

x = platform.system()
print(x)

# USING THE DIR() FUNCTION
# THERE IS A BUILT-IN FUNCTION TO LIST ALL THE FUNCTION NAMES (OR VARIABLE NAMES) IN A 
# MODULE.
# THE DIR() FUNCTION:

# EXAMPLE
# LIST ALL THE DEFINITION NAMES (OR VARIABLE NAMES) IN A MODULE:
y = dir(platform)
print(y)

# NOTE THE DIR() FUNCTION CAN BE USED ON ALL MODULES, ALSO THE ONES YOU CREATE YOURSELF.

# IMPORT FROM MODULE
# YOU CAN CHOOSE TO IMPORT ONLY PARTS FROM A MODULE, BY USING THE FROM KEYWORD.
# EXAMPLE
# IMPORT ONLY THE PERSON1 DICTIONARY FROM THE MODULE:
from mymodule import person1

print(person1["age"])

# NOTE: WHEN IMPORTING USING THE FROM KEYWORD, DO NOT USE THE MODULE NAME WHEN REFERING TO
# ELEMENTS IN THE MODULE. EXAMPLE: PERSON1["AGE"], NOT MYMODULE.PERSON1["AGE"]