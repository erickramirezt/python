# PYTHON REGEX

# A REGEX, OR REGULAR EXPRESSION, IS A SEQUENCE OF CHARACTERS THAT FORMS A SEARCH PATTERN.
# REGEX CAN BE USED TO CHECK IF A STRING CONTAINS THE SPECIFIED SEARCH PATTERN.

# REGEX MODULE
# PYTHON HAS A BUILT-IN PACKAGE CALLED RE, WHICH CAN BE USED TO WORK WITH REGULAR 
# EXPRESSIONS.
# IMPORT THE RE MODULE

import re

# REGEX IN PYTHON
# WHEN YOU HAVE IMPORTED THE RE MODULE, YOU CAN START USING REGULAR EXPRESSIONS:

# EXAMPLE
# SEARCH THE STRING TO SEE IF IT STARTS WITH "The" AND ENDS WITH "Spain"
txt = "The rain in Spain"
x = re.search("^The.*Spain$", txt)

# REGEX FUNCTIONS
# THE re MODULE OFFERS A SET OF FUNCTIONS THAT ALLOWS US TO SEARCH A STRING FOR A MATCH:
# FUNCTION	DESCRIPTION
# findall	Returns a list containing all matches
# search	Returns a Match object if there is a match anywhere in the string
# split	    Returns a list where the string has been split at each match
# sub	    Replaces one or many matches with a string

# METACHARACTERS
# METACHARACTERS ARE CHARACTERS WITH A SPECIAL MEANING:
# CHARACTER     DESCRIPTION	            EXAMPLE
# []	        A SET OF CHARACTERS	    "[a-m]"
# \	            SIGNALS A SPECIAL SEQUENCE (CAN ALSO BE USED TO ESCAPE SPECIAL CHARACTERS)	"\d"
# .	            ANY CHARACTER (EXCEPT NEW LINE CHARACTER)	"he..o"
# ^	            STARTS WITH	                "^hello"
# $	            ENDS WITH	                "world$"
# *	            ZERO OR MORE OCCURRENCES	"aix*"
# +	            ONE OR MORE OCCURRENCES	    "aix+"
# {}	        EXACTLY THE SPECIFIED NUMBER OF OCCURRENCES	"al{2}"
# |	            EITHER OR	                "falls|stays"
# ()	        CAPTURE AND GROUP

# SPECIAL SEQUENCES
# A SPECIAL SEQUENCE IS A \ FOLLOWED BY ONE OF THE CHARACTERS IN THE LIST BELOW, AND HAS A 
# SPECIAL MEANING:
# CHARACTER	DESCRIPTION	                                        EXAMPLE
# \A        RETURNS A MATCH IF THE SPECIFIED CHARACTERS ARE AT THE BEGINNING OF THE STRING	"\AThe"
# \b	    RETURNS A MATCH WHERE THE SPECIFIED CHARACTERS ARE AT THE BEGINNING OR AT THE END OF A WORD	R"\bain"
# \B	    RETURNS A MATCH WHERE THE SPECIFIED CHARACTERS ARE PRESENT, BUT NOT AT THE BEGINNING (OR AT THE END) OF A WORD	R"\Bain"
# \d	    RETURNS A MATCH WHERE THE STRING CONTAINS DIGITS (NUMBERS FROM 0-9)	"\d"
# \D	    RETURNS A MATCH WHERE THE STRING DOES NOT CONTAIN DIGITS	        "\D"
# \s	    RETURNS A MATCH WHERE THE STRING CONTAINS A WHITE SPACE CHARACTER	"\s"
# \S	    RETURNS A MATCH WHERE THE STRING DOES NOT CONTAIN A WHITE SPACE CHARACTER	"\S"
# \w	    RETURNS A MATCH WHERE THE STRING CONTAINS ANY WORD CHARACTERS (CHARACTERS FROM A TO Z, DIGITS FROM 0-9, AND THE UNDERSCORE _ CHARACTER)	"\w"
# \W	    RETURNS A MATCH WHERE THE STRING DOES NOT CONTAIN ANY WORD CHARACTERS	"\W"
# \Z	    RETURNS A MATCH IF THE SPECIFIED CHARACTERS ARE AT THE END OF THE STRING	"Spain\Z"

# SETS
# A SET IS A SET OF CHARACTERS INSIDE A PAIR OF BRACKETS [] WITH A SPECIAL MEANING:
# SET	    DESCRIPTION
# [arn]	    RETURNS A MATCH WHERE ONE OF THE SPECIFIED CHARACTERS (a, r, or n) ARE PRESENT
# [a-n]	    RETURNS A MATCH FOR ANY LOWER CASE CHARACTER, RANGING FROM a TO n
# [^arn]	RETURNS A MATCH FOR ANY CHARACTER EXCEPT a, r, and n
# [0123]	RETURNS A MATCH WHERE ANY OF THE SPECIFIED DIGITS (0, 1, 2, OR 3) ARE PRESENT
# [0-9]	    RETURNS A MATCH FOR ANY DIGIT BETWEEN 0 AND 9
# [0-5][0-9]	RETURNS A MATCH FOR ANY TWO-DIGIT NUMBERS FROM 00 AND 59
# [a-zA-Z]	RETURNS A MATCH FOR ANY CHARACTER ALPHABETICALLY BETWEEN A AND Z, LOWER CASE OR UPPER CASE
# [+]	    IN SETS, +, *, ., |, (), $,{} HAS NO SPECIAL MEANING, SO [+] MEANS: RETURN A MATCH FOR ANY + CHARACTER IN THE STRING

# FINDALL
# THE findall() FUNCTION RETURNS A LIST CONTAINING ALL MATCHES.

# EXAMPLE
# PRINT A LIST OF ALL MATCHES:
txt = "The rain in Spain"
x = re.findall("ai", txt)
print(x)

# THE LIST CONTAINS THE MATCHES IN THE ORDER THEY ARE FOUND.
# IF NO MATCHES ARE FOUND, AN EMPTY LIST IS RETURNED:

# EXAMPLE
# RETURN AN EMPTY LIST IF NO MATCH WAS FOUND:
txt = "The rain in Spain"
x = re.findall("Portugal", txt)
print(x)

# SEARCH
# THE search() FUNCTION SEARCHES THE STRING FOR A MATCH, AND RETURNS A MATCH OBJECT IF THERE 
# IS A MATCH.
# IF THERE IS MORE THAN ONE MATCH, ONLY THE FIRST OCCURRENCE OF THE MATCH WILL BE RETURNED:

# EXAMPLE
# SEARCH FOR THE FIRST WHITE-SPACE CHARACTER IN THE STRING:
txt = "The rain in Spain"
x = re.search("\s", txt)
print("The first white-space character is located in position:", x.start())

# IF NO MATCH WAS FOUND, THE value None IS RETURNED:

# EXAMPLE
# MAKE A SEARCH THAT RETURNS NO MATCH:
txt = "The rain in Spain"
x = re.search("Portugal", txt)
print(x)

# SPLIT
# THE split() FUNCTION RETURNS A LIST WHERE THE STRING HAS BEEN SPLIT AT EACH MATCH:

# EXAMPLE
# SPLIT AT EACH WHITE-SPACE CHARACTER:
txt = "The rain in Spain"
x = re.split("\s", txt)
print(x)

# YOU CAN CONTROL THE NUMBER OF OCCURRENCES BY SPECIFYING THE maxsplit PARAMETER:

# EXAMPLE
# SPLIT THE STRING ONLY AT THE FIRST OCCURRENCE:
txt = "The rain in Spain"
x = re.split("\s", txt, 1)
print(x)

# SUB
# THE sub() FUNCTION REPLACES THE MATCHES WITH THE TEXT OF YOUR CHOICE:

# EXAMPLE
# REPLACE EVERY WHITE-SPACE CHARACTER WITH THE NUMBER 9:
txt = "The rain in Spain"
x = re.sub("\s", "9", txt)
print(x)

# YOU CAN CONTROL THE NUMBER OF REPLACEMENTS BY SPECIFYING THE count PARAMETER:

# EXAMPLE
# REPLACE THE FIRST 2 OCCURRENCES:
txt = "The rain in Spain"
x = re.sub("\s", "9", txt, 2)
print(x)

# MATCH OBJECT
# A Match Object IS AN OBJECT CONTAINING INFORMATION ABOUT THE SEARCH AND THE RESULT.

# NOTE: IF THERE IS NO MATCH, THE value None WILL BE RETURNED, INSTEAD OF THE Match Object.

# EXAMPLE
# DO A SEARCH THAT WILL RETURN A Match Object:
txt = "The rain in Spain"
x = re.search("ai", txt)
print(x) # THIS WILL PRINT AN OBJECT

# THE Match Object HAS PROPERTIES AND METHODS USED TO RETRIEVE INFORMATION ABOUT THE SEARCH,
# AND THE RESULT:
# .span()	    RETURNS A TUPLE CONTAINING THE START-, AND END POSITIONS OF THE MATCH.
# .string	    RETURNS THE STRING PASSED INTO THE FUNCTION
# .group()	    RETURNS THE PART OF THE STRING WHERE THERE WAS A MATCH

# EXAMPLE
# PRINT THE POSITION (START- AND END-POSITION) OF THE FIRST MATCH OCCURRENCE.
# THE REGULAR EXPRESSION LOOKS FOR ANY WORD THAT STARTS WITH AN UPPER CASE "S":
txt = "The rain in Spain"
x = re.search(r"\bS\w+", txt)
print(x.span())

# EXAMPLE
# PRINT THE STRING PASSED INTO THE FUNCTION:
txt = "The rain in Spain"
x = re.search(r"\bS\w+", txt)
print(x.string)

# EXAMPLE
# PRINT THE PART OF THE STRING WHERE THERE WAS A MATCH.
# THE REGULAR EXPRESSION LOOKS FOR ANY WORD THAT STARTS WITH AN UPPER CASE "S":
txt = "The rain in Spain"
x = re.search(r"\bS\w+", txt)
print(x.group())

# NOTE: IF THERE IS NO MATCH, THE value None WILL BE RETURNED, INSTEAD OF THE Match Object.