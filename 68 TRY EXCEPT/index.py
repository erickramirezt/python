# PYTHON TRY EXCEPT

# THE TRY BLOCK LETS YOU TEST A BLOCK OF CODE FOR ERRORS.
# THE EXCEPT BLOCK LETS YOU HANDLE THE ERROR.
# THE ELSE BLOCK LETS YOU EXECUTE CODE WHEN THERE IS NO ERROR.
# THE FINALLY BLOCK LETS YOU EXECUTE CODE, REGARDLESS OF THE RESULT OF THE TRY- AND EXCEPT 
# BLOCKS.

# EXCEPTION HANDLING
# WHEN AN ERROR OCCURS, OR EXCEPTION AS WE CALL IT, PYTHON WILL NORMALLY STOP AND GENERATE 
# AN ERROR MESSAGE.

# THESE EXCEPTIONS CAN BE HANDLED USING THE TRY STATEMENT:

# EXAMPLE
# THE TRY BLOCK WILL GENERATE AN EXCEPTION, BECAUSE X IS NOT DEFINED:
try:
    print(x)
except:
    print("An exception occurred")

# SINCE THE TRY BLOCK RAISES AN ERROR, THE EXCEPT BLOCK WILL BE EXECUTED.
# WITHOUT THE TRY BLOCK, THE PROGRAM WILL CRASH AND RAISE AN ERROR:

# EXAMPLE
# THIS STATEMENT WILL RAISE AN ERROR, BECAUSE X IS NOT DEFINED:
# print(x)

# MANY EXCEPTIONS
# YOU CAN DEFINE AS MANY EXCEPTION BLOCKS AS YOU WANT, E.G. IF YOU WANT TO EXECUTE A 
# SPECIAL BLOCK OF CODE FOR A SPECIAL KIND OF ERROR:

# EXAMPLE
# PRINT ONE MESSAGE IF THE TRY BLOCK RAISES A NAME ERROR AND ANOTHER FOR OTHER ERRORS:
try:
    print(x)
except NameError:
    print("Variable x is not defined")
except:
    print("Something else went wrong")

# ELSE
# YOU CAN USE THE ELSE KEYWORD TO DEFINE A BLOCK OF CODE TO BE EXECUTED IF NO ERRORS WERE
# RAISED:

# EXAMPLE
# IN THIS EXAMPLE, THE TRY BLOCK DOES NOT GENERATE ANY ERROR:
try:
    print("Hello")
except:
    print("Something went wrong")
else:
    print("Nothing went wrong")

# FINALLY
# THE FINALLY BLOCK, IF SPECIFIED, WILL BE EXECUTED REGARDLESS IF THE TRY BLOCK RAISES AN
# ERROR OR NOT.

# EXAMPLE
# TRY TO EXECUTE THE TRY BLOCK, AND IF AN ERROR OCCURS, EXECUTE THE FINALLY BLOCK:
try:
    print(x)
except:
    print("Something went wrong")
finally:
    print("The 'try except' is finished")

# THIS CAN BE USEFUL TO CLOSE OBJECTS AND CLEAN UP RESOURCES:
# EXAMPLE
# TRY TO OPEN AND WRITE TO A FILE THAT IS NOT WRITABLE:
try:
    f = open("demofile.txt")
    try:
        f.write("Lorum Ipsum")
    except:
        print("Something went wrong when writing to the file")
    finally:
        f.close()
except:
    print("Something went wrong when opening the file")

# THE PROGRAM CAN CONTINUE, WITHOUT LEAVING THE FILE OBJECT OPEN

# RAISING AN EXCEPTION
# AS A PYTHON DEVELOPER YOU CAN CHOOSE TO THROW AN EXCEPTION IF A CONDITION OCCURS.
# TO THROW (OR RAISE) AN EXCEPTION, USE THE RAISE KEYWORD.

# EXAMPLE
# RAISE AN ERROR AND STOP THE PROGRAM IF X IS LOWER THAN 0:
x = -1

if x < 0:
    raise Exception("Sorry, no numbers below zero")

# THE RAISE KEYWORD IS USED TO RAISE AN EXCEPTION.
# YOU CAN DEFINE WHAT KIND OF ERROR TO RAISE, AND THE TEXT TO PRINT TO THE USER.

# EXAMPLE
# RAISE A TypeError IF X IS NOT AN INTEGER:
x = "hello"

if not type(x) is int:
    raise TypeError("Only integers are allowed")